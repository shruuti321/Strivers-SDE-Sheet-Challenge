/**
 * Definition of doubly linked list:
 *
 * class Node {
 * public:
 *      int data;
 *      Node *prev;
 *      Node *next;
 *      Node() {
 *          this->data = 0;
 *          this->prev = NULL;
 *          this->next = NULL;
 *      }
 *      Node(int data) {
 *          this->data = data;
 *          this->prev = NULL;
 *          this->next = NULL;
 *      }
 *      Node (int data, Node *next, Node *prev) {
 *          this->data = data;
 *          this->prev = prev;
 *          this->next = next;
 *      }
 * };
 *
 *************************************************************************/

Node * deleteAllOccurrences(Node* head, int k) {
    // Write your code here
    
    if(head==NULL)
    {
        return NULL;
    }
    // if(head->data==k)
    // {
    //     head=head->next;
    // }
    Node* temp=head;
    while(temp!=NULL)
    {
        if(temp->data==k)
        {   
            if(temp==head)
            {
                if(head->next!=NULL)
               { head=head->next;
                temp=temp->next;
               }
               else return NULL; 
            }
           else{
                Node* del=temp->prev;
            if(temp->next!=NULL)
            {
                del->next=temp->next;
                temp->next->prev=del;
                temp=del->next;
            }
            else {
                del->next=NULL;
                break;
            }
         }
    }
        else{
            temp=temp->next;
        }
    }
    return head;
}
