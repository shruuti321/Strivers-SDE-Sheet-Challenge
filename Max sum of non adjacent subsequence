//RECURSIVE
#include <bits/stdc++.h> 
int fun(vector<int>&nums,int ind)
{
    if(ind==0)return nums[ind];
    if(ind<0)return 0;

    int pick=nums[ind]+fun(nums,ind-2);
    int notpick=0+fun(nums,ind-1);
    return max(pick,notpick);
}


int maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
    fun(nums,nums.size()-1);
}

//MEMOIZATION
#include <bits/stdc++.h> 
int fun(vector<int>&nums,int ind,vector<int>&dp)
{
    if(ind==0)return nums[ind];
    if(ind<0)return 0;
    if(dp[ind]!=-1)return dp[ind];
    int pick=nums[ind]+fun(nums,ind-2,dp);
    int notpick=0+fun(nums,ind-1,dp);
    return dp[ind]=max(pick,notpick);
}


int maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
    vector<int>dp(nums.size(),-1);
   return  fun(nums,nums.size()-1,dp);
}

//TABULATION
#include <bits/stdc++.h> 
int maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
   vector<int>dp(nums.size(),-1);
   dp[0]=nums[0];
   int neg=0;
 
   for(int i=1;i<nums.size();i++)
   {
       int take=nums[i];
       if(i>1)take+=dp[i-2];
       int nottake=0+dp[i-1];
       dp[i]=max(take,nottake);
}
return dp[nums.size()-1];
   }
   
