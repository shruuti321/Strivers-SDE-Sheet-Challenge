
int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight){
    // Write Your Code Here.
    vector<vector<int>>dp(n,vector<int>(w+1,0));
    
    for(int i=0;i<=w;i++)
    {
        if(i%weight[0]==0)
            dp[0][i]=(i/weight[0])*profit[0];
       
    }
    for(int i=1;i<n;i++)
    {
        for(int j=0;j<=w;j++)
        {
                int notpick=dp[i-1][j];
                int pick=-1e9;
                if(weight[i]<=j)
                {
                    pick=profit[i]+dp[i][j-weight[i]];
                }
                dp[i][j]=max(pick,notpick);
        }
    }
    return dp[n-1][w];
}
