int f(int ind,int target,vector<int>arr,vector<vector<int>>&dp)
{
	const unsigned int M = 1000000007;
	if(ind==0)
	{
		if(target==0 and arr[0]==0)return 2;
        if (target==0 or arr[0]==target) return 1;
        return 0;
		
	}
	if(dp[ind][target]!=-1)return dp[ind][target];
	int notpick=f(ind-1,target,arr,dp);
	int pick=0;
	if(arr[ind]<=target)
	{
		pick=f(ind-1,target-arr[ind],arr,dp);
	}
	return dp[ind][target]=(pick+notpick)%M;
}



int findWays(vector<int>& arr, int k)
{
	// Write your code here.
	
		int n=arr.size();
	vector<vector<int>>dp(n,vector<int>(k+1,-1));

	return f(n-1,k,arr,dp);
}
