class Solution {
public:
int f(int i,int j,vector<vector<int>>& grid,int n,int m,vector<vector<int>>&dp)
    {
        if(i>=n || j>=m || j<0)return INT_MAX;
        if(i==n-1)return grid[i][j];
        if(dp[i][j]!=-1)return dp[i][j];
        return dp[i][j]=grid[i][j]+min(f(i+1,j,grid,n,m,dp),min(f(i+1,j+1,grid,n,m,dp),f(i+1,j-1,grid,n,m,dp)));
    }
    int minFallingPathSum(vector<vector<int>>& grid) {
         int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>>dp(n,vector<int>(m,-1));
        int mini=INT_MAX;
        int r,c;
        for(int i=0;i<m;i++)
        {
           
               int a=f(0,i,grid,n,m,dp);
               mini=min(mini,a);
            
        }
        return mini;
    }
};
