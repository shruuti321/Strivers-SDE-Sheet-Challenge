bool f(int ind,int target,vector<int>arr,vector<vector<int>>&dp)
{
	if(target==0)return true;
	if(ind==0)return arr[ind]==target;
	if(dp[ind][target]!=-1)return dp[ind][target];

	int nottake=f(ind-1,target,arr,dp);
	int take=false;
	if(arr[ind]<=target)
	{
		take=f(ind-1,target-arr[ind],arr,dp);
	}
	return dp[ind][target]=take||nottake;

}

int minSubsetSumDifference(vector<int>& arr, int n)
{
	// Write your code here.
	int sum=0;
	for(int i=0;i<n;i++)
	{
		sum+=arr[i];
	}
	vector<vector<int>>dp(n,vector<int>(sum+1,-1));

	for(int i=0;i<=sum;i++)
	{
		bool ans=f(n-1,i,arr,dp);
	}
	int mini=1e9;
	for(int i=0;i<=sum;i++)
	{
		if(dp[n-1][i]==true)
		{
			int s1=sum-i;
			mini=min(mini,abs(sum-2*i));
		}
	}
	return  mini;
}
