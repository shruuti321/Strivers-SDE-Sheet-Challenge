const int MOD = 1e9 + 7;

class Solution {
public:
    int sumSubarrayMins(vector<int>& arr) {
        int n=arr.size();
        vector<int>left(n,-1);
        vector<int>right(n,n);

        stack<int>s;
        for(int i=0;i<n;i++)                                        //find previous smaller element index
        {
            if(s.empty()){
                s.push(i);
                continue;
            }
            while(!s.empty() && arr[s.top()]>=arr[i])
            {
                s.pop();
            }
            if(!s.empty())
                left[i]=s.top();
            s.push(i);

        }
       s=stack<int>();
        for(int i=n-1;i>=0;i--)                                    //find next smaller element index
        {
            if(s.empty()){
                s.push(i);
                continue;
            }
            while(!s.empty() && arr[s.top()]>arr[i])
            {
                s.pop();
            }
            if(!s.empty())
                right[i]=s.top();
            s.push(i);

        }
        long long sum=0;
        for(int i=0;i<n;i++)
        {
            sum+=static_cast<long long>(i-left[i])*(right[i]-i)*arr[i]%MOD;                                                    // for every element the (distance between the elemnt and its prev smaller ele * next smaller ele)*ele
            sum%=MOD;                                                                                    //ex 4 and 3 are dist. therefore total 4*3 arrays are there where ele is min. so to cal sum ,multiply by ele
        }
        return sum;

    }
};
