#include<bits/stdc++.h>
int shortestPathBinaryMatrix(vector<vector<int>> &matrix, pair<int, int> src, pair<int, int> dest)
{
    // Write your code here
    int n=matrix.size();
    int m=matrix[0].size();
    queue<pair<int,pair<int,int>>>q;
    vector<vector<int>>dist(n,vector<int>(m,1e9));
    if(matrix[src.first][src.second]==0)return -1;
    if(src.first==dest.first && src.second==dest.second)
    {
        if(matrix[src.first][src.second]==1)
            return 0;
        else return -1;
    }
    q.push({0,{src.first,src.second}});
    dist[src.first][src.second]=0;
      int dr[4]={0,0,1,-1};
        int dc[4]={1,-1,0,0};
   
    while(!q.empty())
    {
        auto it=q.front();
        q.pop();
        int dis=it.first;
        int row=it.second.first;
        int col=it.second.second;

      
        for(int i=0;i<4;i++)
        {
            int nr=row+dr[i];
            int nc=col+dc[i];
            if(nr>=0 and nr<n and nc>=0 and nc<m and matrix[nr][nc]==1 
            and dis+1<dist[nr][nc])
            {
                dist[nr][nc]=dis+1;
                if(nr==dest.first && nc==dest.second)
                {
                        return dis+1;
                }
                q.push({dis+1,{nr,nc}});
                
            }
        }
    }
    return -1;
}
