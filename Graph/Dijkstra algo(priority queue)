vector<int> dijkstra(vector<vector<int>> &edge, int vertices, int edges, int source)
{
    // Write your code here.
    // 'edge' contains {u, v, distance} vectors.
    vector<pair<int,int>>adj[vertices];
    for(int i=0;i<edges;i++)
    {
        adj[edge[i][0]].push_back({edge[i][1],edge[i][2]});
        adj[edge[i][1]].push_back({edge[i][0],edge[i][2]});
    }
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
    vector<int>dist(vertices,1e9);
    pq.push({0,source});
    dist[source]=0;

    while(!pq.empty())
    {
        int dis=pq.top().first;
        int node=pq.top().second;
        pq.pop();
        for(auto it:adj[node])
        {
            int curdis=it.second;
            int adjnode=it.first;
            if(dis+curdis<dist[adjnode])
            {
                dist[adjnode]=dis+curdis;
                pq.push({dist[adjnode],adjnode});
            }
        }
    }
    return dist;
}
