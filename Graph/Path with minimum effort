int minimumTimeTakingPath(vector<vector<int>> &heights)
{
    // Write your code here.
    int n=heights.size();
    int m=heights[0].size();
    vector<vector<int>>diff(n,vector<int>(m,1e9));
    priority_queue<pair<int, pair<int, int>>,
                       vector<pair<int, pair<int, int>>>,
                       greater<pair<int, pair<int, int>>>>q;

    q.push({0,{0,0}});
    diff[0][0]=0;
    int dr[]={-1,1,0,0};
    int dc[]={0,0,-1,1};
    while(!q.empty())
    {   
        
        int dist=q.top().first;
        int row=q.top().second.first;
        int col=q.top().second.second;
         if(row==n-1 && col==m-1)return dist;
         q.pop();
        for(int i=0;i<4;i++)
        {
            int nr=row+dr[i];
            int nc=col+dc[i];

            if(nc>=0 && nc<m && nr>=0 && nr<n)
            {   
               
                int hdif=max(abs(heights[nr][nc]-heights[row][col]),dist);            
                if(hdif<diff[nr][nc])
                {
                    diff[nr][nc]=hdif;
                    q.push({hdif,{nr,nc}});
                }
            }
        }

    }
    return 0;
}
