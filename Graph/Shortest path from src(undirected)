vector<int> shortestPath(int n, vector<vector<int>>&edges, int src) {
    // Write your code here.
    vector<int>dist(n,1e9);
    vector<int>adj[n];
    for(int i=0;i<edges.size();i++)
    {
        adj[edges[i][0]].push_back(edges[i][1]);
        adj[edges[i][1]].push_back(edges[i][0]);

    }
    queue<int>q;
    q.push(src);
    dist[src]=0;
    while(!q.empty())
    {
        int node=q.front();
        q.pop();
        for(auto it:adj[node])
        {
            // dist[it]=min(dist[it],dist[node]+1);
            if(dist[it]>dist[node]+1)
            {
               dist[it]=dist[node]+1;
                 q.push(it);
            }
           
        }
    }
    for(int i=0;i<n;i++)
    {
        if(dist[i]==1e9)
        {
            dist[i]=-1;
        }
    }
    return dist;
}
