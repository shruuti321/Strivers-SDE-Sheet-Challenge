//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends

#include<bits/stdc++.h>
class Solution 
{
    public:
    //Function to find out minimum steps Knight needs to reach target position.
    bool isValid(int x,int y,int n, vector<vector<bool>>visited)
    {
        if(x<n && x>=0 && y<n && y>=0 && !visited[x][y])
            return true;
        return false;
    }
	int minStepToReachTarget(vector<int>&KnightPos,vector<int>&TargetPos,int n)
	{
	    // Code here
	    int tx=TargetPos[0]-1;
	    int ty=TargetPos[1]-1;
	    int x1=KnightPos[0]-1;
	    int x2=KnightPos[1]-1;
	    
	    queue<pair<int,int>>q;
	    vector<vector<bool>>visited(n,vector<bool>(n,false));
	    
	    if(x1==tx && x2==ty)return 0;
	    visited[x1][x2]=true;
	    q.push({x1,x2});
	    int count=0;
	    while(!q.empty())
	    {
	        int size=q.size();
	        count++;
	        while(size!=0)
	        {
	            auto it=q.front();
	            q.pop();
	            int nx=it.first;
	            int ny=it.second;
	                
	           int ax[8]={1,1,-1,-1,2,2,-2,-2};
	           int ay[8]={2,-2,2,-2,1,-1,1,-1};
	           
	           for(int i=0;i<8;i++)
	           {
	               int xx=nx+ax[i];
	               int yy=ny+ay[i];
	               if(xx==tx && yy==ty)return count;
	               
	               if(isValid(xx,yy,n,visited))
	               {
	                   visited[xx][yy]=1;
	                   q.push({xx,yy});
	               }
	           }
	            
	            size--;
	        }
	    }
	    return count;
	    
	}
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		vector<int>KnightPos(2);
		vector<int>TargetPos(2);
		int N;
		cin >> N;
		cin >> KnightPos[0] >> KnightPos[1];
		cin >> TargetPos[0] >> TargetPos[1];
		Solution obj;
		int ans = obj.minStepToReachTarget(KnightPos, TargetPos, N);
		cout << ans <<"\n";
	}
	return 0;
}
// } Driver Code Ends
