/************************************************************

    Following is the TreeNode class structure:

    template <typename T>
    class TreeNode
    {
    public:
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T dat)
        {
            this->data = dat;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/
 #include<bits/stdc++.h>
vector<int> getTopView(TreeNode<int> *root)
{
    // Write your code here.
    vector<int>ans;
    if(root==NULL)return ans;
    queue<pair<TreeNode<int>*,int>>q;                                               //node,x coordinate(line)
    map<int,int>mpp;                                                                // line,node val

    q.push({root,0});
    while(!q.empty())
    {
        auto it=q.front();
        q.pop();
        TreeNode<int>* node=it.first;
        int val=node->data;
        int line=it.second;
        
         if(mpp.find(line)==mpp.end())                                            //only one element from each line (i.e top element)
        {
            mpp[line]=val;
        }
        if(node->left!=NULL)
        {
            q.push({node->left,line-1});
        }
        if(node->right!=NULL)
        {
            q.push({node->right,line+1});
        }
        
       
    }

    for(auto i:mpp)
    {
        ans.push_back(i.second);                                                    //map stores in sorted order of keys
    }
    return ans;
}
